#+TITLE: Building the presentation
#+OPTIONS: ^:nil

* Overview
This (rather lengthy) file describes the build process and is used to generate the [[file:../gulpfile.js][gulpfile]].

The task of the build process is the transformation of =index.org= to a [[https://revealjs.com/][reveal.js]] presentation.
** Important targets
:PROPERTIES:
:ID:       2b7f9a55-6c27-416f-afd4-21e6e1f80ca5
:END:
Calling =gulp= (or =gulp default=) will build the whole presentation. The final version will be published into the =public/= directory.

*It is important that the presentation is viewed via http(s)* since some JS libraries will not work correctly when served via the file system. The task [[id:8879b480-5de7-4984-978a-0645337d26b4][=gulp serve=]] starts a small webserver for that.
*** =gulp publish= - build =public/=
=gulp= or =gulp publish= will update =public/= to the latest result (see [[id:25e1c467-b340-43de-8dc3-26748886bfeb][here]]).

[[id:73f2d5e2-4ba0-4250-86bc-e81cb34f5ca8][=gulp clean=]] is *not* called as a part of publish.

#+begin_example sh
# Serve rebuild the presentation and serve it via a local http server
gulp clean publish serve --series
#+end_example
*** =gulp serve= - development webserver with watch
:PROPERTIES:
:ID:       8879b480-5de7-4984-978a-0645337d26b4
:END:
=gulp serve= will start a small webserver to view the results (via [[https://www.npmjs.com/package/gulp-serve][gulp-serve]]).

To override the port/path use =--port= and =--root=:
#+begin_example sh
# Serve /tmp via port 9999
gulp serve --port 9999 --root /tmp
#+end_example

Changes to =index.org= will be detected and automatically build & deployed to =public/=.
=gulp serve= will /not/ do the initial build.

#+begin_example sh
# A good way to start the day
gulp clean publish serve --series
#+end_example

The task is defined [[id:525d205f-7998-45a3-b615-92ea8f9dfe0b][here]].

*** =gulp package= - create a ZIP
:PROPERTIES:
:ID:       4ab8166f-97e4-433c-ab2e-b4ca7f39e950
:END:
=gulp package= will create a ZIP file of =public/**/*=.

The task is defined [[id:9ad0ef3f-43f0-49d7-bf8f-6d71c5c3f6e4][here]].
*** =gulp clean= - clean =build/= and =public/=
:PROPERTIES:
:ID:       73f2d5e2-4ba0-4250-86bc-e81cb34f5ca8
:END:
=gulp clean= will delete all build outputs.

The task is defined [[id:122614dd-080f-421c-bc9a-e5ea6589da36][here]].
** Design decisions
The whole process serves the simple matter of /creating a presentation/. That means neither bandwitdh nor page load speed are a primary consideration.

These are the primary design goals, from more general to more specific:
- Get the Job Done :: In the end the result in =public/= matters.
- Ease of Use :: The whole process must be easy to use with a [[id:6dd3eadc-eb0c-474a-964a-b5d8e3298390][minimum set of required tools]].
- Automated Build :: The whole process needs to be automated.
- Support for =org-mode= :: This was the trigger. I wanted to use [[https://www.gnu.org/software/emacs/][emacs]] with [[https://orgmode.org/][org-mode]], [[https://orgmode.org/worg/org-contrib/babel/][org-babel]], and [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]] for writing slides.
- Reuseable :: The whole system should be reusable across multiple presentations. /Ideally/ a new presentation just needs some bootstrap (repository) and /content/.
- One Pipeline Per File :: Each file /should/ only be modified (e.g. minify) in exactly /one/ pipeline. Changing files in multiple pipelines makes it difficult to figure out /where/ things happen.
- Configuration in [[file:../package.json][package.json]] :: Ideally (see /Reuseable/) a new presentation only needs changes in [[file:../package.json][package.json]] and [[file:../src/index.org][index.org]].
** Directory layout
The directory layout is quite simple: Files are moved from ={src, node_modules}= to =build=. In =build= files are generated (e.g. =.org= --> =.html=) and then copied to =public=.

- node_modules/ :: [[file:../package.json][Modules]] installed via [[https://www.npmjs.com/][npm]]. Copied to =build/js= via specific targets. (see [[id:f8ced29c-64bd-47f3-b0da-6bbfe854a34f][node_modules/]])
- src/ :: Source files (/read-only/ during build)
  + . :: files that will end up in =build/= via copy. =index.org= is located here. (see[[id:3dd4b9ae-afb2-44cc-869c-de1a1e9e7b0f][src/]])
  + img/ :: images, will be copied to =build/img/.=. ([[id:3e134761-ac77-4e84-82ba-0330e5ec7397][src/img/]])
  + js/ :: JavaScript files, will be copied (and potentially minified & uglified) to =build/js=. ([[id:b87d6643-1595-47aa-9a42-9404a5e0505f][src/js/]])
  + css/ :: CSS files, will be copied (and potentially minified) to =build/css=. ([[id:fd9305bd-518c-45cf-9391-684c9a1bf65b][src/css/]])
  + scss/ :: [[https://sass-lang.com/documentation/syntax][SCSS]] files, will be run through [[https://sass-lang.com/][Sass]] and copied (and potentially minified) to =build/css=.  ([[id:86401845-3984-4e0a-b4c3-ffea05c5b6e8][src/scss/]])
- build/ :: /Not in version control/. Root folder for all build related activities. E.g. the [[id:2b7f9a55-6c27-416f-afd4-21e6e1f80ca5][building of index.org]] happens in here. ([[id:9184651b-cbd8-4728-9022-a4ee3d28d811][build/]]). Later copied to =public/= by [[id:25e1c467-b340-43de-8dc3-26748886bfeb][Fill =public/=]].
  + . :: files that will end up in =public/= via copy. Before that, files will be transformed, e.g. by creating =index.html= by running [[file:../src/index.org][index.org]]. ([[id:a74072d1-de6c-4083-91db-b9f9c3a09513][Build index.org]])
  + img/ :: images, will be copied to =public/img/.=
  + js/ :: JavaScript files, will be copied to =public/js=. No further minification/uglification.
  + css/ :: CSS files, will be copied (and potentially minified) to =public/css=.
- public/ :: The final build result.
  + . :: Can be served via [[id:8879b480-5de7-4984-978a-0645337d26b4][=gulp serve=]] and packaged as a ZIP via  [[id:4ab8166f-97e4-433c-ab2e-b4ca7f39e950][=gulp package=]].
  + img/ :: images
  + js/ :: JavaScript files
  + css/ :: CSS files
*** TODO Flow between folders
# PLEASE RUN THIS **AFTER** tangling


** TODO Configuration in =packages.json=
** Edit the presentation
:PROPERTIES:
:ID:       7bb6442d-00e0-4ee1-8838-469d1d47f7e6
:END:
The whole presentation is contained in [[file:../src/index.org]] and build via org-mode.
** Required tools for building
:PROPERTIES:
:ID:       6dd3eadc-eb0c-474a-964a-b5d8e3298390
:END:
- gulp :: Gulp is used for orchestrating the build
- Docker :: [[file:../src/index.org][index.org]] is compiled to html via [[https://hub.docker.com/repository/docker/xuxxux/org-re-reveal-builder][xuxxux/org-re-reveal-builder]] ([[file:../docker/Dockerfile][Dockerfile]])
** Tools used by the author
*** =gulp= for building
The build is automated via [[https://gulpjs.com/docs/en/getting-started/quick-start/][gulp]]. The configuration is done via the [[file:../gulpfile.js][gulpfile.js]] and  NPMs [[file:../package.json][package.json]].

- gulpfile.json :: Contains the workflow. The goal is to keep the gulpfile static for a lot of projects.
- package.json :: Configures dependencies for build (=--save-dev=), runtime (=--save-prod=) and configuration like paths, urls, globs.
*** =reveal.js= as presentation framework
[[https://revealjs.com/][reveal.js]] 4.x is used as presentation framework.
*** =emacs= with =org-mode=, =org-babel=, =org-re-reveal= for writing/exporting

*** =Docker= for transforming =org= to =html=
* Building this document
[[file:BUILD.md][BUILD.md]] is generated by exporting [[file:BUILD.org][BUILD.org]] via =C-c C-e g g= (via =org-gfm-export-to-markdown= from [[https://github.com/larstvei/ox-gfm][ox-gfm]]).

#+begin_src emacs-lisp :tangle no :exports results :results silent
; Automatically tangle on export
(org-babel-tangle)
#+end_src
* Building =gulpfile.js=
:PROPERTIES:
:header-args:javascript:    :tangle ../gulpfile.js :comments no :noweb yes
:ID:       e5d9a67c-cd18-455c-9c7b-1c04b114acfb
:END:
#+NAME: js-jq
#+begin_src sh :tangle no :exports none :var q=".version" :var prefix="" :var raw="no" :var show_query="yes" :results output
echo -n $(
# echo  q=$q, prefix=$prefix, raw=$raw, show_query=${show_query}
if [ ${show_query} = "yes" ]; then
    echo -n "${q} := "
fi

if [ ${raw} = "yes" ]; then
    jq_param="--raw-output"
fi

jq ${jq_param} "${q}" ../package.json | sed -e "s!^!${prefix}!" )
#+end_src

#+NAME: jq
#+begin_src sh :tangle no :exports none :var q=".author" :results output :wrap src json
    echo "// jq \"${q}\" package.json"
    jq "${q}" ../package.json
#+end_src

=gulpfile.js= is generated by /tangling/ BUILD.org via [[https://orgmode.org/manual/Extracting-Source-Code.html][org-babel]]. The export can be manually triggered by calling =org-babel-tangle= (=C-c C-v C-t=) from within emacs.

A lot of the behavior is driven by the configuration in [[file:../package.json][package.json]]. The configuration is located under =cfg=:
#+CALL: jq(q=".cfg")
** Red Tape
:PROPERTIES:
:ID:       fb0c7346-3891-4ee0-b242-74d26997352b
:END:

#+begin_src javascript :exports none
 /*!
  ,* This file is automatically generated by tangling doc/BUILD.org
  ,*
  ,* <<js-jq(q=".name",raw="yes", show_query="no")>> <<js-jq(q=".version",raw="yes", show_query="no")>>
  ,*
  ,* <<js-jq(q=".homepage",raw="yes", show_query="no")>>
  ,* Licensed under <<js-jq(q=".license",raw="yes", show_query="no")>>
  ,*
  ,* <<js-jq(q=".copyright",raw="yes", show_query="no")>> <<js-jq(q=".author.name",raw="yes", show_query="no")>>, <<js-jq(q=".author.web",raw="yes", show_query="no")>>
 ,*/
#+end_src

Red tape to set up =gulp=.
*** Make package.json available
:PROPERTIES:
:ID:       3c5736be-c658-4eb5-a096-6e8bd4a0248e
:END:
#+begin_src javascript
const pkg = require('./package.json')
#+end_src
*** Setup plugins for gulpfile
:PROPERTIES:
:ID:       835f0936-033b-44c4-b21f-473e535a9172
:END:
Most plugins are scoped under =$= to (a) make clear what is provided by a plugin and (b) prepare for automatically generating =$= from =package.json=.

#+begin_src javascript
const { series, parallel } = require('gulp')
const { src, dest } = require('gulp')
const { watch } = require('gulp');
const gulp = require('gulp');

const { rollup } = require('rollup')
const { terser } = require('rollup-plugin-terser')

const Vinyl = require('vinyl')

const path = require('path')

const $ = {
    if : require('gulp-if'),
    newer : require('gulp-newer'),
    filter : require('gulp-filter'),
    rename : require('gulp-rename'),

    path : require('path'),
    glob : require('glob'),
    yargs : require('yargs'),
    colors : require('colors'),

    // Testing
    qunit : require('node-qunit-puppeteer'),

    babel : require('@rollup/plugin-babel').default,
    commonjs : require('@rollup/plugin-commonjs'),
    resolve : require('@rollup/plugin-node-resolve').default,

    tap : require('gulp-tap'),
    zip : require('gulp-zip'),
    sass : require('gulp-sass'),
    header : require('gulp-header'),
    eslint : require('gulp-eslint'),
    minify : require('gulp-clean-css'),
    connect : require('gulp-connect'),
    autoprefixer : require('gulp-autoprefixer'),
    merge : require('merge-stream'),
    child_process : require('child_process').exec,
    fs   : require('fs'),
    log   : require('fancy-log'),
    sourcemaps   : require('gulp-sourcemaps'),
    del : require('del'),
    favicons : require('favicons').stream
}
#+end_src
*** Configure Plugins
:PROPERTIES:
:ID:       846e5594-5dfd-424e-ae7a-753783b7d3d9
:END:
Banner prefixed to my scripts:
#+begin_src javascript
const banner = `/*!
 ,* ${pkg.name}  ${pkg.version}
 ,* ${pkg.homepage}
 ,* ${pkg.license}
 ,*
 ,* ${pkg.copyright} ${pkg.author.name}, ${pkg.author.web}
,*/
`
#+end_src

Prevent warnings from opening too many test pages:
#+begin_src javascript
process.setMaxListeners(20)
#+end_src
** Custom Functions
:PROPERTIES:
:ID:       307e4bec-1c65-4092-8bfa-8d4ac61906fe
:END:
=string_src= generates a virtual file ~filename~ with ~string~ as content. ([[https://stackoverflow.com/questions/23230569/how-do-you-create-a-file-from-a-string-in-gulp][Source]])
#+begin_src javascript
function string_src(filename, string) {
  var src = require('stream').Readable({ objectMode: true })
  src._read = function () {
    this.push(new Vinyl({
      cwd: '',
      base: null,
      path: filename,
      contents: Buffer.from(string)
    }))
    this.push(null)
  }
  return src
}
#+end_src

** Folders
*** node_modules/
:PROPERTIES:
:ID:       f8ced29c-64bd-47f3-b0da-6bbfe854a34f
:END:
#+begin_src javascript :export none
/*
 * Scripts to get things from node_modules to build.
 */
#+end_src

**** reveal.js
:PROPERTIES:
:ID:       4c9372b8-0efd-45dd-9c0b-f293e80cb882
:END:
#+begin_src javascript
function node_modules_reveal_js_to_build() {
  const dst = pkg.cfg.paths.build.js + 'reveal.js'
  $.log(`-> Copy reveal.js to ${dst}`)

  return src(["node_modules/reveal.js/**/*"])
        .pipe(dest(dst))

}

node_modules_reveal_js_to_build.displayName = "Reveal.js to build"
node_modules_reveal_js_to_build.description = `Copy reveal.js from node_modules to ${pkg.cfg.paths.build.base}.`
#+end_src
**** d3 and extensions
Install d3 and d3-graphviz.
***** hpcc-js/wasm
:PROPERTIES:
:ID:       7228b6a7-f6a1-4662-8ddb-cddcfc81d8fb
:END:
=@hpcc-js/wasm= is required by [[https://github.com/magjac/d3-graphviz][d3-graphviz]]. The folder needs to be copied as-is because the =.wasm= files are dynamically loaded.

#+begin_src javascript
function node_modules_hpcc_js_to_build() {
  const dst = pkg.cfg.paths.build.js + '@hpcc-js/wasm/dist'
  $.log(`-> Copy @hpcc-js/wasm to ${dst}`)

  return src(["node_modules/@hpcc-js/wasm/dist/**/*"])
        .pipe(dest(dst))
}

node_modules_hpcc_js_to_build.displayName = "@hpcc-js/wasm to build"
node_modules_hpcc_js_to_build.description = "Copy @hpcc-js/wasm to build."
#+end_src
***** d3
:PROPERTIES:
:ID:       c40f5f3b-c99b-4c04-be44-c7413fded092
:END:
#+begin_src javascript
function node_modules_d3_to_build() {
  const dst = pkg.cfg.paths.build.js
  $.log(`-> Copy d3 to ${dst}`)

  return src(["node_modules/d3/dist/d3.min.js"])
        .pipe(dest(dst))
}
node_modules_d3_to_build.displayName = "d3 to build"
node_modules_d3_to_build.description = "Copy d3to build."
#+end_src
***** d3-graphviz
:PROPERTIES:
:ID:       46ed6009-60df-41ff-980b-f65c42e66c92
:END:
#+begin_src javascript
function node_modules_d3_graphviz_to_build() {
  const dst = pkg.cfg.paths.build.js
  $.log(`-> Copy d3-graphviz to ${dst}`)

  return src(["node_modules/d3-graphviz/build/d3-graphviz.js"])
        .pipe(dest(dst))
}
node_modules_d3_graphviz_to_build.displayName = "d3-graphviz to build"
node_modules_d3_graphviz_to_build.description = "Copy d3-graphviz to build."
#+end_src
***** d3 composed
:PROPERTIES:
:ID:       eb16846b-9fe6-4cf9-acbb-5b67e0ef9c74
:END:
#+begin_src javascript
function node_modules_d3_to_build_compose() {
  return parallel(node_modules_hpcc_js_to_build,
                  node_modules_d3_to_build,
                  node_modules_d3_graphviz_to_build)
}
node_modules_d3_to_build_compose.displayName = "d3 & tools to build"
node_modules_d3_to_build_compose.description = "Copy d3 & tools from node_modules to build."
#+end_src
**** mathjax
:PROPERTIES:
:ID:       f909e7fa-0a69-41aa-babb-7dd164c7d892
:END:
#+begin_src javascript
function node_modules_mathjax_to_build() {
  $.log("-> Copy mathjaxto build.")

  return src(["node_modules/mathjax/es5/tex-chtml.js"])
        .pipe(dest(pkg.cfg.paths.build.js))
}
node_modules_mathjax_to_build.displayName = "mathjax to build"
node_modules_mathjax_to_build.description = "Copy mathjax from node_modules to build."
#+end_src
**** Combined rules for =node_modules/=
:PROPERTIES:
:ID:       b7161708-2aab-4e7c-b4a3-d1376e1bce1e
:END:
#+begin_src javascript
function node_modules_to_build_compose() {
  return parallel(node_modules_reveal_js_to_build,
                  node_modules_d3_to_build_compose(),
                  node_modules_mathjax_to_build)
}
node_modules_to_build_compose.displayName = "node_modules to build"
node_modules_to_build_compose.description = "Copy all libraries from node_modules to build."
// Enable for debugging: exports.node_modules_to_build = node_modules_to_build_compose()
#+end_src
*** src/
:PROPERTIES:
:ID:       3dd4b9ae-afb2-44cc-869c-de1a1e9e7b0f
:END:
#+begin_src javascript :export none
/*
 * Scripts to get things from src to build.
 */
#+end_src
**** src/
:PROPERTIES:
:ID:       4f59dae5-2eb4-4165-bf2f-d710eacdebc3
:END:
Copy all files into the build directory.

#+begin_src javascript
function src_root_to_build() {
  $.log(`-> Copy all files from ${pkg.cfg.paths.src.base} to ${pkg.cfg.paths.build.base}`)

  return src(pkg.cfg.paths.src.base + '*', { nodir: true }) // <<js-jq(q=".cfg.paths.src.base")>>
    .pipe(dest(pkg.cfg.paths.build.base))  // <<js-jq(q=".cfg.paths.build.base")>>
}
src_root_to_build.displayName = "Shallow copy base to build"
src_root_to_build.description = `Shallow copy  ${pkg.cfg.paths.src.base} to build.`
#+end_src
**** src/img/
:PROPERTIES:
:ID:       3e134761-ac77-4e84-82ba-0330e5ec7397
:END:
Copy all images into the build directory.

#+begin_src javascript
function src_img_to_build() {
  $.log(`-> Copy img from ${pkg.cfg.paths.src.img} to ${pkg.cfg.paths.build.img}`)

  return src(pkg.cfg.paths.src.img + '**/*.{png,jpg,jpeg,gif,svg}') // <<js-jq(q=".cfg.paths.src.img")>>
    .pipe(dest(pkg.cfg.paths.build.img))                            // <<js-jq(q=".cfg.paths.build.img")>>
}
src_img_to_build.displayName = "img to build"
src_img_to_build.description = `Copy ${pkg.cfg.paths.src.img} to build.`
#+end_src
**** src/js/
:PROPERTIES:
:ID:       b87d6643-1595-47aa-9a42-9404a5e0505f
:END:
JavaScript will be linted, prefixed with a banner and then copied into the build directory.

#+begin_src javascript
function src_lint_js() {
  $.log(`-> Linting ${[pkg.cfg.paths.src.js + '**/*.js', 'gulpfile.js']}`)

  return src([pkg.cfg.paths.src.js + '**/*.js', 'gulpfile.js']) // <<js-jq(q=".cfg.paths.src.js")>>
        .pipe($.eslint())
        .pipe($.eslint.format())
}
src_lint_js.displayName = "Lint my JS"
src_lint_js.description = `Lint ${pkg.cfg.paths.src.js}.`

// Use a lambda bc. otherwise gulp would use the functions display name with spaces as target
exports.lint = () => src_lint_js()
exports.lint.description = src_lint_js.description


function src_copy_js_to_build() {
  return src(pkg.cfg.paths.src.js + '**/*.js') // <<js-jq(q=".cfg.paths.src.js")>>
    .pipe($.header(banner))
    .pipe(dest(pkg.cfg.paths.build.js))        // <<js-jq(q=".cfg.paths.build.js")>>
}
src_copy_js_to_build.displayName = "Copy JS to build"
src_copy_js_to_build.description = `Copy ${pkg.cfg.paths.src.js} to build and add banner.`

function src_js_to_build_compose() {
  return series(src_lint_js, src_copy_js_to_build)
}
src_js_to_build_compose.description = `Lint, copy and banner JS from ${pkg.cfg.paths.src.js} to build.`
#+end_src
**** src/css/
:PROPERTIES:
:ID:       fd9305bd-518c-45cf-9391-684c9a1bf65b
:END:
#+begin_src javascript
function src_css_to_build() {
  return src(pkg.cfg.paths.src.css + '**/*.css') // <<js-jq(q=".cfg.paths.src.css")>>
        .pipe($.sourcemaps.init({loadMaps: true}))
        .pipe($.autoprefixer())
        .pipe($.sourcemaps.write("./"))
        .pipe(dest(pkg.cfg.paths.build.css))     // <<js-jq(q=".cfg.paths.build.css")>>
}
src_css_to_build.displayName = "Transform css to build"
src_css_to_build.description = `Copy ${pkg.cfg.paths.src.css} to build, create sourcemaps and autoprefix.`
#+end_src
**** src/scss/
:PROPERTIES:
:ID:       86401845-3984-4e0a-b4c3-ffea05c5b6e8
:END:
#+begin_src javascript
function src_scss_to_build() {
  return src(pkg.cfg.paths.src.scss + '**/*.scss') // <<js-jq(q=".cfg.paths.src.scss")>>
        .pipe($.sourcemaps.init({loadMaps: true}))
        .pipe($.sass({includePaths: pkg.cfg.paths.include.scssIncludePaths /* <<js-jq(q=".cfg.paths.include.scssIncludePaths")>> */
            })
            .on("error", $.sass.logError))
        .pipe($.autoprefixer())
        .pipe($.sourcemaps.write("./"))
        .pipe(dest(pkg.cfg.paths.build.css))       // <<js-jq(q=".cfg.paths.build.css")>>
}
src_scss_to_build.displayName = "Transform scss to build"
src_scss_to_build.description = `Compile ${pkg.cfg.paths.src.scss} to build, create sourcemaps and autoprefix.`
#+end_src
**** Combined rules for =src/=
:PROPERTIES:
:ID:       5956f2e3-b139-435c-894c-3baba0608b50
:END:
#+begin_src javascript
function src_to_build_compose() {
  return parallel(src_root_to_build,
                      src_img_to_build,
                      src_js_to_build_compose(),
                      src_css_to_build,
                      src_scss_to_build)
}
// exports.src_to_build = src_to_build_compose()
// exports.src_to_build.description = "Transform src to build"
#+end_src
**** Populate Build (combined src/node_modules)
:PROPERTIES:
:ID:       255f4acb-a5df-4238-a1d9-39b8b8f4de0d
:END:
#+begin_src javascript
function build_prepare_build_compose() {
    return parallel(node_modules_to_build_compose(),
                    src_to_build_compose())
}
exports.prepare_build = build_prepare_build_compose()
exports.prepare_build.description = `Prepare ${pkg.cfg.paths.build.base} with node_modules and  ${pkg.cfg.paths.src.base}.`
#+end_src
*** build/
:PROPERTIES:
:ID:       9184651b-cbd8-4728-9022-a4ee3d28d811
:END:
#+begin_src javascript :export none
/*
 * Scripts to build things in build.
 */
#+end_src
**** Build index.org
:PROPERTIES:
:ID:       a74072d1-de6c-4083-91db-b9f9c3a09513
:END:
TODO: This has still some issues
- The resulting files are owned by root

#+begin_src javascript
function build_org_file_with_docker()
{
    const docker_image = pkg.cfg.vars.build_org_docker_local
    const build_dir = path.join(__dirname, pkg.cfg.paths.build.base)

    $.log(`-> Configured docker container: ${docker_image}. Sources from ${build_dir}`)
    const docker_cmd = `docker run --rm -v "${build_dir}":/tmp/build  "${docker_image}"  /root/convert-to-html.sh /tmp/build`

    $.log(docker_cmd)
    var exec = require('child_process').exec;

    return exec(docker_cmd, (err, stdout, stderr) =>
        {
            if (err) {
              $.log.error(stderr)
              throw new Error('kaboom: ' + err)
            }
        })
}
exports.build_org_file_with_docker = build_org_file_with_docker
exports.build_org_file_with_docker.displayName = "Transform index.org via Docker"
exports.build_org_file_with_docker.description = `Build index.org with "${pkg.cfg.vars.build_org_docker_local}" docker container.`
#+end_src
**** Create licenses
:PROPERTIES:
:ID:       21161d99-eca7-4a66-9e0e-02dc9c994710
:END:
Gather all node licensed and put them in the =build/= directory. Licenses used only during build are not included.
#+begin_src javascript
function build_gather_node_modules_licenses(cb) {
    const dst = pkg.cfg.paths.build.base
    const filename = pkg.cfg.vars.licenses
    $.log(`-> Gathering all (potentially distributed) licenes from node_modules to ${dst}${filename}`)

    const checker = require('license-checker')
    const treeify = require('treeify')

    checker.init({
        start: '.',
        production: true,
        development: false
    }, function(err, packages) {
        if (err) {
            cb(new Error('kaboom: ' + err));
        } else {
            string_src(filename,  treeify.asTree(packages, true))
                .pipe(dest(dst))
            cb()
        }
    })
}
// exports.node_licenses = build_gather_node_modules_licenses
build_gather_node_modules_licenses.displayName = "Gather licenses from node_modules"
build_gather_node_modules_licenses.description = `Gathering all (potentially distributed) licenes from node_modules to ${pkg.cfg.vars.licenses}`
#+end_src
**** Build favicons
:PROPERTIES:
:ID:       b175e86c-5d89-44c3-a6c2-938dd09bcf9a
:END:
Generate the favicions via [[https://github.com/itgalaxy/favicons][itgalaxy/favicons]].

#+begin_src javascript
function build_favicons() {
    const source = pkg.cfg.favicon.src

    const configuration = {
        appName: pkg.name,                            // Your application's name. `string`
        appShortName: null,                       // Your application's short_name. `string`. Optional. If not set, appName will be used
        appDescription: pkg.description,                     // Your application's description. `string`
        developerName: pkg.author.name,                      // Your (or your developer's) name. `string`
        developerURL: pkg.homepage,                       // Your (or your developer's) URL. `string`
        background: pkg.cfg.favicon.background,
        path: pkg.cfg.favicon.path,
        url: pkg.homepage,
        display: "standalone",
        orientation: "portrait",
        scope: "/",
        start_url: "/",
        version: 1.0,
        logging: false,
        html: "index.html",
        pipeHTML: false,
        replace: true,
        icons: {
            android: false,              // Create Android homescreen icon. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
            appleIcon: false,            // Create Apple touch icons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
            appleStartup: false,         // Create Apple startup images. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
            coast: false,                // Create Opera Coast icon. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
            favicons: true,             // Create regular favicons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
            firefox: false,              // Create Firefox OS icons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
            windows: false,              // Create Windows 8 tile icons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
            yandex: false                // Create Yandex browser icon. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
        }
    }

  return src(source)
        .pipe($.favicons(configuration))
        .on("error", $.log)
        .pipe(dest(pkg.cfg.favicon.dest))
}

build_favicons.displayName = "Build favicons"
build_favicons.description = `Derive favicons from ${pkg.cfg.favicon.src}.`
//exports.favicons = build_favicons
#+end_src
**** Complete Build
:PROPERTIES:
:ID:       19ecb09b-7684-45d8-a8c8-c3b3b49f07a0
:END:
#+begin_src javascript
exports.finish_build = parallel(build_gather_node_modules_licenses,
                                build_favicons,
                                series(build_prepare_build_compose(),
                                       build_org_file_with_docker))
exports.finish_build.displayName = "build"
exports.finish_build.description = `Populate and build ${pkg.cfg.paths.build.base}.`
#+end_src
*** public/
:PROPERTIES:
:ID:       67119e48-3561-42d3-9aa3-f5bf7d95a0a0
:END:
#+begin_src javascript :export none
/*
 * Scripts to get things from build to public.
 */
#+end_src
**** Filter =build/= to =public/=
:PROPERTIES:
:ID:       25e1c467-b340-43de-8dc3-26748886bfeb
:END:
Copy over =build/= to =public/=. Filter out temporary files and =org= files.
#+begin_src javascript
function public_copy_from_build() {
  return src(pkg.cfg.paths.build.base + "**/*")
        .pipe($.filter(pkg.cfg.filter.publishThese))
        .pipe(dest(pkg.cfg.paths.dist.base))
}
public_copy_from_build.displayName = "Copy to build"
public_copy_from_build.description = `Copy files matching ${pkg.cfg.filter.publishThese} from ${pkg.cfg.paths.build.base} to ${pkg.cfg.paths.dist.base}.`


exports.publish = series(exports.finish_build,
                         public_copy_from_build)

exports.publish.description = `Build the project and publish to ${pkg.cfg.paths.dist.base}.`
#+end_src
** Utility Functions
:PROPERTIES:
:ID:       8824f6ab-4e84-4402-9534-3ec3c1bee0f6
:END:
#+begin_src javascript :export none
/*
 * Utility functions
 */
#+end_src
*** serve
:PROPERTIES:
:ID:       525d205f-7998-45a3-b615-92ea8f9dfe0b
:END:

Default values for the server started by [[id:525d205f-7998-45a3-b615-92ea8f9dfe0b][serve]]:
#+begin_src javascript
const root = $.yargs.argv.root || pkg.cfg.paths.dist.base // <<js-jq(q=".cfg.paths.dist.base")>>
const port = $.yargs.argv.port || 8000
const host = $.yargs.argv.bind || '127.0.0.1'
#+end_src

#+begin_src javascript
async function reload() {
    // FIXME: not working
    $.connect.reload()
}
#+end_src

=gulp serve= automatically reloads on changes to the =.org= file.

#+begin_src javascript
function serve() {
    $.connect.server({
        root: root,
        port: port,
        host: host,
        livereload: true
    })

    $.log(`Watching ${[pkg.cfg.paths.src.base + '*.org']} ...`)
    watch(pkg.cfg.paths.src.base + '*.org',
            series(src_root_to_build,
                   build_org_file_with_docker,
                   public_copy_from_build,
                   reload
                  ))
}

serve.description = `Serve ${root} as http://${host}:${port}/. Override with --{host,port,root}.`
exports.serve = serve
#+end_src
*** clean
:PROPERTIES:
:ID:       122614dd-080f-421c-bc9a-e5ea6589da36
:END:
Delete =build/= and =public/=.

Since =clean= is a very sharp knife, we take some precautions. Only subfolders will be deleted.
#+begin_src javascript
function clean() {

  const to_be_deleted = [
      pkg.cfg.paths.build.base,
      pkg.cfg.paths.dist.base
  ]

  for (let candidate of to_be_deleted) {
      if (! candidate.startsWith("./")) {
          const msg=`Will not delete "${candidate}": Configure path in package.json to start with './'`
          $.log.error(msg)
          throw new Error('kaboom: ' + msg)
      }
  }
  return $.del(to_be_deleted)
}

clean.description = `Delete all build outputs (${pkg.cfg.paths.build.base}, ${pkg.cfg.paths.dist.base}).`
exports.clean = clean
#+end_src
*** package
:PROPERTIES:
:ID:       9ad0ef3f-43f0-49d7-bf8f-6d71c5c3f6e4
:END:
Do a fresh build of the presentation and write it into a zip file.

#+begin_src javascript
function package_public() {
   return src(pkg.cfg.paths.dist.base + "**/*")
                                 .pipe($.zip(pkg.cfg.vars.distZip))
                                 .pipe(dest('./'))
}
package_public.displayName = `Create ${pkg.cfg.vars.distZip}`
package_public.description = `Create ${pkg.cfg.vars.distZip}.`

exports.package = series(exports.clean, exports.publish, package_public)
exports.package.displayName = "package"
exports.package.description = `Build & create ${pkg.cfg.vars.distZip}.`
#+end_src
*** default
:PROPERTIES:
:ID:       51d64db5-b265-45a1-a7e0-879bcb8ff1cc
:END:
#+begin_src javascript
exports.default = exports.publish
#+end_src
