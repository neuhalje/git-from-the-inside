#+TITLE: Building the presentation

* Overview
** Directory layout
- node_modules :: [[file:../package.json][Modules]] installed via [[https://www.npmjs.com/][npm]]. Copied to =build/js= via specific targets. TODO targets.
- src/ :: Source files (/read-only/ during build)
  + . :: files that will end up in =build/= via copy. [[file:../src/index.org][index.org]] is located here. TARGET TODO
  + img/ :: images, will be copied to =build/img/.=. TARGETxxx TODO
  + js/ :: JavaScript files, will be copied (and potentially minified & uglified) to =build/img=. TARGETxxx TODO
  + css/ :: CSS files, will be copied (and potentially minified) to =build/css=. TARGETxxx TODO
  + scss/ :: [[https://sass-lang.com/documentation/syntax][SCSS]] files, will be run through [[https://sass-lang.com/][Sass]] and copied (and potentially minified) to =build/css=. TARGETxxx TODO
- build/ :: Root folder for all build related activities. E.g. the [[id:2b7f9a55-6c27-416f-afd4-21e6e1f80ca5][building of index.org]] happens in here.
  + img/ :: images, will be copied to =public/img/.=. TARGETxxx TODO
  + js/ :: JavaScript files, will be copied to =public/js=. No further minification/uglification. TARGETxxx TODO
  + css/ :: CSS files, will be copied (and potentially minified) to =public/css=. TARGETxxx TODO
- public/ :: Root folder for the final build result. Can be served via [[id:8879b480-5de7-4984-978a-0645337d26b4][=gulp serve=]] and packaged as a ZIP via  [[id:4ab8166f-97e4-433c-ab2e-b4ca7f39e950][=gulp package=]].
  + img/ :: images
  + js/ :: JavaScript files
  + css/ :: CSS files

*** Flow between folders
#+begin_src dot :file img/flow-between-folders.png :cmdline -Tpng -Kdot
 digraph dfd{
    node[shape=folder]
    rankdir=LR

    subgraph cluster_src {
        label = "src/"
        src_img [label="img/*"];
    }

    src_img-> proc1:f0;
    proc1 [label="{<f0> 1.0|<f1> Some process here\n\n\n}" shape=Mrecord];
     proc1:f1 -> build_img;

    subgraph cluster_build {
      label = "build/"
      build_img [label="img/."]
    }

    subgraph cluster_public {
      label = "public/"
      public_img [label="img/."]
    }
}
#+end_src

#+RESULTS:
[[file:img/data-flow.png]]

** Edit =org= file
:PROPERTIES:
:ID:       7bb6442d-00e0-4ee1-8838-469d1d47f7e6
:END:
** Build and publish
:PROPERTIES:
:ID:       2b7f9a55-6c27-416f-afd4-21e6e1f80ca5
:END:
The final version will be published into the =public/= directory. Calling =gulp= (or =gulp default=) will build the whole presentation.

=C-c C-e v v=

It is important that the presentation is viewed via =http(s)= since some JS libraries will not correctly work when served via the file system.

*** =gulp serve= - development webserver with watch
:PROPERTIES:
:ID:       8879b480-5de7-4984-978a-0645337d26b4
:END:
=gulp serve= will start a small webserver to view the results.

*** =gulp package= - create a ZIP
:PROPERTIES:
:ID:       4ab8166f-97e4-433c-ab2e-b4ca7f39e950
:END:
=gulp package= will create a ZIP file of =public/**/*=.
** Required tools
- gulp :: Gulp is used for orchestrating the build
- Docker :: [[file:../src/index.org][index.org]] is compiled to html via [[https://hub.docker.com/repository/docker/xuxxux/org-re-reveal-builder][xuxxux/org-re-reveal-builder]] ([[file:../docker/Dockerfile][Dockerfile]])
* Details
** Tools used
*** =gulp= for building
The build is automated via [[https://gulpjs.com/docs/en/getting-started/quick-start/][gulp]]. The configuration is done via the [[file:../gulpfile.js][gulpfile.js]] and  NPMs [[file:../package.json][package.json]].

- gulpfile.json :: Contains the workflow. The goal is to keep the gulpfile static for a lot of projects.
- package.json :: Configures dependencies for build (=--save-dev=), runtime (=--save-prod=) and configuration like paths, urls, globs.
*** =reveal.js= as presentation framework
[[https://revealjs.com/][reveal.js]] 4.x is used as presentation framework.
*** =emacs= with =org-mode=, =org-babel=, =org-re-reveal= for writing/exporting

*** =Docker= for transforming =org= to =html=
** Build targets
* Building this document
[[file:BUILD.md][BUILD.md]] is generated by exporting [[file:BUILD.org][BUILD.org]] via =C-c C-e m m= (via =org-md-export-to-markdown=).
