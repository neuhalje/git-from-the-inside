#+TITLE: GIT from the inside
#+Subtitle: How GIT sees the world
#+AUTHOR: Jens Neuhalfen
#+EMAIL: jens@neuhalfen.name
#+DATE: 2020-12-31

#+SETUPFILE: setupfile.inc
#+SETUPFILE: setupfile-d3graphviz.inc
#+INCLUDE: git-tooling.inc
#+REVEAL_PLUGINS: (highlight d3graphviz notes search zoom)

#+REVEAL_EXTRA_OPTIONS: totalTime:2700

#+REVEAL_TALK_URL: http://neuhalje.github.io/presentation_git-from-the-inside
#+REVEAL_TALK_QR_CODE: does not exist

#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%s</h2><h3>%A %a</h3><p>View online: <a href="%u">%u</a></p> <p><div class="r-stretch"><a href="http://creativecommons.org/licenses/by-sa/4.0/"><img src="/img/cc/cc.svg"/><img src="/img/cc/by.svg"/><img src="/img/cc/sa.svg"/></a></div><a href="/#/slide-LICENSE">LICENSE</a></p>

* Examples
The following examples can be skipped via a =:noexport= tag on this headline
** Notes and timing
:PROPERTIES:
:reveal_extra_attr: data-timing="300"
:END:
#+BEGIN_NOTES
These notes are shown in the speakers view.
#+END_NOTES
- Press =S= to see notes (see [[https://revealjs.com/speaker-view/][the reveal.js documentation]]).
- Set =#+REVEAL_EXTRA_OPTIONS: totalTime:2700= to set the total time for the slides
- Set ~:reveal_extra_attr: data-timing="120"~ to set a timer for this slide (shown in the speakers notes).
- Reveal automatically calculates the duration of the slides without ~data-timing~

| Duration in minutes | Value for =data-timing= / =totalTime= |
|---------------------+---------------------------------------|
|                   1 |                                    60 |
|                   5 |                                   300 |
|                  10 |                                   600 |
|                  30 |                                  1800 |
|                  45 |                                  2700 |
|                  60 |                                  3600 |
|                  90 |                                  5400 |
#+TBLFM: $2=$1*60

** CSS
:PROPERTIES:
:CUSTOM_ID: example_css
:END:
Some CSS classes have been defined
*** Two Coloumns
=.two-columns=
#+begin_export html
<div class="two-columns r-stretch" style="background:black">
<div style="background:red">Left</div>
<div style="background:blue">Right</div>
</div>
#+end_export

*** Two Coloumns, two rows
=.two-columns .two-rows=
#+begin_export html
<div class="two-columns two-rows r-stretch" style="background:black">
<div style="background:red">Top Left</div>
<div style="background:blue">Top Right</div>
<div style="background:green">Bottom Left</div>
<div style="background:yellow">Bottom Right</div>
</div>
#+end_export
*** Two Coloumns, two rows - row 1 spans two cols
=.two-columns .two-rows=
#+begin_export html
<div class="two-columns two-rows r-stretch" style="background:black">
<div style="background:red" class="top-left two-cols-wide">Top Left and right</div>
<div style="background:green" class="bottom-left">Bottom Left</div>
<div style="background:yellow" class="bottom-right">Bottom Right</div>
</div>
#+end_export
*** Two Coloumns, two rows + notes
=.two-columns .two-rows-notes=
#+begin_export html
<div class="two-columns two-rows-notes r-stretch" style="background:black">
<div style="background:red">Top Left</div>
<div style="background:blue">Top Right</div>
<div style="background:green">Bottom Left</div>
<div style="background:yellow">Bottom Right</div>
<div style="background:orange" class="note">NOTE</div>
</div>
#+end_export
*** Two Coloumns, two rows + notes (long notes)
=.two-columns .two-rows-notes=
#+begin_export html
<div class="two-columns two-rows-notes r-stretch" style="background:black">
<div style="background:red">Top Left</div>
<div style="background:blue">Top Right</div>
<div style="background:green">Bottom Left</div>
<div style="background:yellow">Bottom Right</div>
#+end_export

#+HTML: <div style="background:orange" class="note">
The notes

- can span multiple
- lines and will resize
- automatically
#+HTML: </div>
#+HTML: </div> <!-- container-->
*** Two Coloumns, two rows + notes (placed via CSS class)
=.two-columns .two-rows-notes= but placed via CSS class
#+HTML: <div class="two-columns two-rows-notes r-stretch" style="background:black">

#+HTML: <div style="background:orange" class="note">
The notes

- can span multiple
- lines and will resize
- automatically
#+HTML: </div> <!-- notes -->

#+HTML: <div style="background:blue" class="top-right">
Top Right
#+HTML: </div> <!-- top right -->

#+HTML: <div style="background:yellow" class="bottom-right">
Bottom Right
#+HTML: </div> <!-- bottom right -->

#+HTML: <div style="background:green" class="bottom-left">
Bottom Left
#+HTML: </div> <!-- bottom left -->

#+HTML: <div style="background:red" class="top-left">
Top Left
#+HTML: </div> <!-- top left -->

#+HTML: </div> <!-- container -->
** Images
:PROPERTIES:
:CUSTOM_ID: example_image
:END:

Images should be generated into =org-gen/= (see =doc/BUILD.org=):

#+NAME: example-image-plantuml
#+begin_src plantuml :file "org-gen/example-image-plantuml.png"
@startuml
title Example

' https://plantuml.com/class-diagram
$Class01 "1" *-- "many" Class02 : contains
Class03 o-- Class04 : aggregation
Class05 --> "1" Class060
Class06 -> Class060 : pointing right
@enduml
#+end_src
** Halt on Error                                                               :noexport:
Failure case: This page /should/ halt the generator.
#+begin_src python
raise Exception("please stop")
#+end_src

#+begin_src python
this is a syntax error
#+end_src

#+begin_src bash
echo Hello there
echo Hello there to stderr >&2
exit 1
#+end_src
** Add Elements to Lists                                                       :noexport:
#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none appear) :frag_idx (6 5 4 3 2 1)
- I will grow. (6)
- I will shrink. (5)
- I rolled in. (4)
- I will fade out. (3)
- I don't fragment. (2)
- I appear (1)
** Combined
#+HTML: <div class="container two-columns two-rows r-stretch">
#+HTML: <div class="top-right">
#+NAME: includeme
#+begin_src plantuml :file "org-gen/example-image2-plantuml.png"
@startuml
title Example #2

' https://plantuml.com/class-diagram
$Class01 "1" *-- "many" Class02 : contains
Class03 o-- Class04 : aggregation
Class05 --> "1" Class060
Class06 -> Class060 : pointing right
@enduml
#+end_src
#+HTML: </div><div class="bottom-left two-cols-wide">
This is how the source code looks like:
#+begin_src plantuml :exports code :noweb yes
<<includeme>>
#+end_src
#+HTML: </div><div class="top-left">
See the graph on the right side?
#+HTML: </div> <!-- top left -->
#+HTML: </div> <!-- container -->
/The source spans two columns to give us enough space./
** Example Git
:PROPERTIES:
:header-args: :var repo="/tmp/x/number-of-the-beast2"
:repo: /tmp/x/number-of-the-beast2
:END:
#+BEGIN_NOTES
Test note
bla note
#+END_NOTES

#+begin_src bash :exports results :results silent
git config --get user.name || git config --global --add user.name "Alice"
git config --get user.email || git config --global --add user.email "alice@neuhalfen.name"
git config -l
#+end_src

# setup
#+CALL: init_repo()

# source/output is hidden
#+begin_src bash :exports results :results silent
echo "$(date +%s%N) 1st in $repo" >> /tmp/log
cd "${repo}" || exit 1
git commit -m'1st commit' --allow-empty
#+end_src

{{{git_with_diff(number1src)}}}

# source is hidden, code is executed via macro
#+NAME: number1src
#+begin_src bash :exports none :results output
echo "$(date +%s%N) 2nd in $repo" >> /tmp/log
cd "${repo}" || exit 1
git commit -m'2nd commit' --allow-empty
#+end_src

#+HTML: <div id='number1src-result' class='r-stretch' scale='2'></div>

#+begin_src bash :exports code :noweb yes
<<number1src>>
#+end_src

{{{git_with_diff_result(number1src)}}}
** Math with MathJax
Math sould be fenced by =$=:
#+begin_example
${n! \over k!(n-k)!} = {n \choose k}$
#+end_example

${n! \over k!(n-k)!} = {n \choose k}$

* Licensing
   :PROPERTIES:
   :CUSTOM_ID: LICENSE
   :ID:       e3e9e398-eb48-4a16-821d-e0df3f688ea4
   :END:
#+begin_export html
<div class="license-container">
  <a href="http://creativecommons.org/licenses/by-sa/4.0/">
    <img class="inline-icon" src="/img/cc/cc.svg"/>
    <img class="inline-icon" src="/img/cc/by.svg"/>
    <img class="inline-icon" src="/img/cc/sa.svg"/>
    <p>This work is licensed under a <i>Creative Commons Attribution-ShareAlike 4.0 International</i> license.</p>
  </a>
</div>
<a href="https://neuhalfen.name/">
  <div class="license-container">
    <img class="inline-icon" src="/img/wikimedia/Copyright.svg"/><span> by Jens Neuhalfen</span>
  </div>
</a>
#+end_export

- [[file:licenses.txt][licenses collected from node_modules]]
