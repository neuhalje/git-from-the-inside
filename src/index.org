#+TITLE: GIT from the inside
#+Subtitle: or: How GIT sees the world
#+AUTHOR: Jens Neuhalfen
#+EMAIL: jens@neuhalfen.name
#+DATE: 2020-12-31

#+REVEAL_THEME: /css/themes/simple.css
#+SETUPFILE: setupfile.inc
#+SETUPFILE: setupfile-d3graphviz.inc
#+INCLUDE: git-tooling.inc
#+REVEAL_PLUGINS: (highlight d3graphviz notes search zoom)
#+REVEAL_EXPORT_NOTES_TO_PDF: separate-page

#+REVEAL_EXTRA_OPTIONS: totalTime:2700

#+REVEAL_MISCINFO: https://github.com/neuhalje/presentation_git-from-the-inside
#+REVEAL_TALK_URL: https://neuhalje.github.io/presentation_git-from-the-inside
#+REVEAL_TALK_QR_CODE: does not exist
# TODO: Add
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%s</h2><h3>%A %a</h3><p><a href="%u">View Online</a> &mdash; <a href="%u?print-pdf">Speakers Notes</a> &mdash; <a href="%m">Source Code</a></p> <p><div class="r-stretch license-container"><a href="/#/slide-LICENSE"><img class="inline-icon" src="/img/cc/cc.svg"/><img class="inline-icon" src="/img/cc/by.svg"/><img class="inline-icon" src="/img/cc/sa.svg"/> <b>LICENSE</b></a></div</p><p><ul><li>Press <b>s</b> for speakers view</li><li>Press <b>o</b> for overview</li></ul></p>

#+MACRO: color @@latex:{\color{$1}@@ @@html: <span class="$1">@@ $2 @@latex:\@@@@html:</span>@@

#+MACRO: red {{{color(red, $1)}}}
#+MACRO: blue {{{color(blue, $1)}}}
#+MACRO: green {{{color(green, $1)}}}

* Why SCM?
* Git basics
** What is a hash?
#+BEGIN_NOTES
For our purposes the following properties are important:
- fixed length :: The length of $h$ is always the same, e.g. 160 bit for SHA-1.
- deterministic :: The same data always computes to the same hash: $data_1 == data_2 \Rightarrow h(data_1) == h(data_2)$
- collision resistant :: It is /{{{red(very unlikely)}}}/ that different data hashes to the same value: $h(data_1) == h(data_2) \Rightarrow data_1 == data_2$

Since arbitrary long values can be hashed the [[https://en.wikipedia.org/wiki/Pigeonhole_principle][pigeon hole principle]] tells us that there must be collisions.
#+END_NOTES

A /hash/ $h(x)$ is a *fixed length* value derived from some data $x$.

\begin{align}
A == B  &\Rightarrow h(A) == h(B) & \text{always} \\
h(A) == h(B)  &\Rightarrow A == B & \text{almost always (*)}
\end{align}

(*) It is /{{{red(very unlikely)}}}/ that different values hashes to the same hash. If this happens it is called a /hash collision/.
*** Hash collisions I/II
Since arbitrary long values can be hashed to a fixed length hash the [[https://en.wikipedia.org/wiki/Pigeonhole_principle][pigeon hole principle]] tells us that there *must* be collisions.

For =sha1= and =git= this probability depends on the number of changed files & commits (=n=):

\begin{equation}
p_{collision}(n) \approx 1-\left({\frac {2^{160}-1}{2^{160}}}\right)^{\frac {n(n-1)}{2}}
\end{equation}

#+BEGIN_NOTES
Given =n= random integers drawn from a discrete uniform distribution with range =[1,d]=, *what is the probability =p(n; d)= that at least two numbers are the same?* -- [[https://en.wikipedia.org/wiki/Birthday_problem][source]]

\begin{equation}
p(n; d) \approx 1-\left({\frac {d-1}{d}}\right)^{\frac {n(n-1)}{2}}
\end{equation}
#+END_NOTES
*** Hash collisions II/II
#+NAME: probability-of-collisions
#+begin_src gnuplot :exports results :file org-gen/hash-collision-probability.svg
reset

set terminal svg enhanced
set xlabel 'Number of commits/files/..'
set ylabel 'Probability of a collision'
# set arrow from 23,0 to 23,0.5073 nohead
# set arrow from 0,0.5073 to 23,0.5073 nohead
# set label '23' at 22,-0.025 font ",16"
set grid ytics

set title "Putting it all together"
d = 2**160
lottery = 1.0 / 139838160.0

# set yrange [0:1]
f(x) =  1 - exp( -1 * x * (x - 1) / (2*d)   )

plot [1:5*10**20] f(x) title "probability of collision" with lines lw 3, lottery title "lottery win" lw 3
#+end_src

How likely is a hash collision in an average project?
#+HTML: <div class="two-columns r-stretch">

#+HTML: <div>
Chance of a lottery win (6 of 49 + 1 in 10):

~1 : 139.838.160~

Rule of thumb: {{{green(Don't create more than $10^{10}$ (ten US-billion) files and $10^{10}$ commits per repository)}}}
#+HTML: </div>

#+HTML: <div>
#+attr_html: :class scale-to-cell
#+RESULTS: probability-of-collisions
[[file:org-gen/hash-collision-probability.svg]]
#+HTML: </div>

#+HTML: </div> <!-- container -->
** What is /content addressed storage/?
:PROPERTIES:
:END:
#+BEGIN_NOTES
A /content addressable storage/ is a very simple database with two operations:
- put(data) --> hash_data :: Write an object into the storage and get the objects hash back as key.
- get(hash_data) --> data :: Pass a hash and get the data. Git uses [[https://en.wikipedia.org/wiki/SHA-1][SHA-1]] as hashing function (=sha1(data) == hash_data=).

The main advantages of such a storage are:
- Storing one =data= multiple times takes /no/ additional storage space.
- The implementation is extremely simple.

Disadvantages:
- /Bootstrapping/ - the hashes themselves say nothing about the data. At least some external storage is needed.
- Deleting objects needs additional work (/reference counting/).
#+END_NOTES
{{{green(A /content addressed storage/ is a very simple database)}}}
#+HTML: <div class="two-rows two-columns r-stretch">
#+HTML: <div class="bottom-left two-cols-wide">
| PRO                   | CON                                |
|-----------------------+------------------------------------|
| - simple              | - no =query= method besides /hash/ |
| - data not duplicated |                                    |
#+HTML: </div>
#+HTML: <div  class="top-right">
#+NAME: tree_objectstore.svg
#+attr_html: :class scale-to-cell
[[./img/tree_objectstore.svg]]
#+HTML: </div>
#+HTML: <div  class="top-left">
- put :: $put(data) \to hash_{data}$
- get :: $get(hash_{data}) \to data$

{{{green(sha1(data) == hash)}}}
#+HTML: </div>
#+HTML: </div>
** Tree, Blob, Commit
** Branch
** Merge
** Rebase
** Remote
* Git Use Cases
** Example Git
:PROPERTIES:
:header-args: :var repo="/tmp/x/number-of-the-beast2"
:repo: /tmp/x/number-of-the-beast2
:END:
#+BEGIN_NOTES
Test note
bla note
#+END_NOTES

#+begin_src bash :exports results :results silent
git config --get user.name || git config --global --add user.name "Alice"
git config --get user.email || git config --global --add user.email "alice@neuhalfen.name"
git config -l
#+end_src

# setup
#+CALL: init_repo()

# source/output is hidden
#+begin_src bash :exports results :results silent
echo "$(date +%s%N) 1st in $repo" >> /tmp/log
cd "${repo}" || exit 1
git commit -m'1st commit' --allow-empty
#+end_src

{{{git_with_diff(number1src)}}}

# source is hidden, code is executed via macro
#+NAME: number1src
#+begin_src bash :exports none :results output
echo "$(date +%s%N) 2nd in $repo" >> /tmp/log
cd "${repo}" || exit 1
git commit -m'2nd commit' --allow-empty
#+end_src

#+HTML: <div id='number1src-result' class='r-stretch' scale='2'></div>

#+begin_src bash :exports code :noweb yes
<<number1src>>
#+end_src

{{{git_with_diff_result(number1src)}}}
* Examples
The following examples can be skipped via a =:noexport= tag on this headline
** Notes and timing
:PROPERTIES:
:reveal_extra_attr: data-timing="300"
:END:
#+BEGIN_NOTES
These notes are shown in the speakers view.
#+END_NOTES
- Press =S= to see notes (see [[https://revealjs.com/speaker-view/][the reveal.js documentation]]).
- Set ~#+REVEAL_EXTRA_OPTIONS: totalTime:2700~ to set the total time for the slides to 45min
- Set ~:reveal_extra_attr: data-timing="120"~ to set a timer for this slide (shown in the speakers notes) to 2min
- Reveal automatically calculates the duration of the slides without ~data-timing~

| Duration in minutes | Value for =data-timing= / =totalTime= |
|---------------------+---------------------------------------|
|                   1 |                                    60 |
|                   5 |                                   300 |
|                  10 |                                   600 |
|                  30 |                                  1800 |
|                  45 |                                  2700 |
|                  60 |                                  3600 |
|                  90 |                                  5400 |
#+TBLFM: $2=$1*60

** CSS
:PROPERTIES:
:CUSTOM_ID: example_css
:END:
Some CSS classes have been defined
*** Two Coloumns
=.two-columns=
#+begin_export html
<div class="two-columns r-stretch" style="background:black">
<div style="background:red">Left</div>
<div style="background:blue">Right</div>
</div>
#+end_export

*** Two Coloumns, two rows
=.two-columns .two-rows=
#+begin_export html
<div class="two-columns two-rows r-stretch" style="background:black">
<div style="background:red">Top Left</div>
<div style="background:blue">Top Right</div>
<div style="background:green">Bottom Left</div>
<div style="background:yellow">Bottom Right</div>
</div>
#+end_export
*** Two Coloumns, two rows - row 1 spans two cols
=.two-columns .two-rows=
#+begin_export html
<div class="two-columns two-rows r-stretch" style="background:black">
<div style="background:red" class="top-left two-cols-wide">Top Left and right</div>
<div style="background:green" class="bottom-left">Bottom Left</div>
<div style="background:yellow" class="bottom-right">Bottom Right</div>
</div>
#+end_export
*** Two Coloumns, two rows + notes
=.two-columns .two-rows-notes=
#+begin_export html
<div class="two-columns two-rows-notes r-stretch" style="background:black">
<div style="background:red">Top Left</div>
<div style="background:blue">Top Right</div>
<div style="background:green">Bottom Left</div>
<div style="background:yellow">Bottom Right</div>
<div style="background:orange" class="note">NOTE</div>
</div>
#+end_export
*** Two Coloumns, two rows + notes (long notes)
=.two-columns .two-rows-notes=
#+begin_export html
<div class="two-columns two-rows-notes r-stretch" style="background:black">
<div style="background:red">Top Left</div>
<div style="background:blue">Top Right</div>
<div style="background:green">Bottom Left</div>
<div style="background:yellow">Bottom Right</div>
#+end_export

#+HTML: <div style="background:orange" class="note">
The notes

- can span multiple
- lines and will resize
- automatically
#+HTML: </div>
#+HTML: </div> <!-- container-->
*** Two Coloumns, two rows + notes (placed via CSS class)
=.two-columns .two-rows-notes= but placed via CSS class
#+HTML: <div class="two-columns two-rows-notes r-stretch" style="background:black">

#+HTML: <div style="background:orange" class="note">
The notes
- can span multiple
- lines and will resize
- automatically
#+HTML: </div> <!-- notes -->

#+HTML: <div style="background:blue" class="top-right">
Top Right
#+HTML: </div> <!-- top right -->

#+HTML: <div style="background:yellow" class="bottom-right">
Bottom Right
#+HTML: </div> <!-- bottom right -->

#+HTML: <div style="background:green" class="bottom-left">
Bottom Left
#+HTML: </div> <!-- bottom left -->

#+HTML: <div style="background:red" class="top-left">
Top Left
#+HTML: </div> <!-- top left -->

#+HTML: </div> <!-- container -->
** Included Images

** Generated Images
:PROPERTIES:
:CUSTOM_ID: example_image
:END:

Images should be generated into =org-gen/= (see =doc/BUILD.org=):

#+NAME: example-image-plantuml
#+begin_src plantuml :file "org-gen/example-image-plantuml.png"
@startuml
title Example

' https://plantuml.com/class-diagram
$Class01 "1" *-- "many" Class02 : contains
Class03 o-- Class04 : aggregation
Class05 --> "1" Class060
Class06 -> Class060 : pointing right
@enduml
#+end_src
** Halt on Error                                                               :noexport:
Failure case: This page /should/ halt the generator.
#+begin_src python
raise Exception("please stop")
#+end_src

#+begin_src python
this is a syntax error
#+end_src

#+begin_src bash
echo Hello there
echo Hello there to stderr >&2
exit 1
#+end_src
** Add Elements to Lists
#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none appear) :frag_idx (6 5 4 3 2 1)
- I will grow. (6)
- I will shrink. (5)
- I rolled in. (4)
- I will fade out. (3)
- I don't fragment. (2)
- I appear (1)
** Combined
#+HTML: <div class="container two-columns two-rows r-stretch">
#+HTML: <div class="top-right">
#+NAME: includeme
#+begin_src plantuml :file "org-gen/example-image2-plantuml.png"
@startuml
title Example #2

' https://plantuml.com/class-diagram
$Class01 "1" *-- "many" Class02 : contains
Class03 o-- Class04 : aggregation
Class05 --> "1" Class060
Class06 -> Class060 : pointing right
@enduml
#+end_src
#+HTML: </div><div class="bottom-left two-cols-wide">
This is how the source code looks like:
#+begin_src plantuml :exports code :noweb yes
<<includeme>>
#+end_src
#+HTML: </div><div class="top-left">
See the graph on the right side?
#+HTML: </div> <!-- top left -->
#+HTML: </div> <!-- container -->
/The source spans two columns to give us enough space./
** Example Git
:PROPERTIES:
:header-args: :var repo="/tmp/x/number-of-the-beast2"
:repo: /tmp/x/number-of-the-beast2
:END:
#+BEGIN_NOTES
Test note
bla note
#+END_NOTES

#+begin_src bash :exports results :results silent
git config --get user.name || git config --global --add user.name "Alice"
git config --get user.email || git config --global --add user.email "alice@neuhalfen.name"
git config -l
#+end_src

# setup
#+CALL: init_repo()

# source/output is hidden
#+begin_src bash :exports results :results silent
echo "$(date +%s%N) 1st in $repo" >> /tmp/log
cd "${repo}" || exit 1
git commit -m'1st commit' --allow-empty
#+end_src

{{{git_with_diff(number1src)}}}

# source is hidden, code is executed via macro
#+NAME: number1src
#+begin_src bash :exports none :results output
echo "$(date +%s%N) 2nd in $repo" >> /tmp/log
cd "${repo}" || exit 1
git commit -m'2nd commit' --allow-empty
#+end_src

#+HTML: <div id='number1src-result' class='r-stretch' scale='2'></div>

#+begin_src bash :exports code :noweb yes
<<number1src>>
#+end_src

{{{git_with_diff_result(number1src)}}}
** Math with MathJax
Math sould be fenced by =$=:
#+begin_example
${n! \over k!(n-k)!} = {n \choose k}$
#+end_example

${n! \over k!(n-k)!} = {n \choose k}$

* Licensing
   :PROPERTIES:
   :CUSTOM_ID: LICENSE
   :ID:       e3e9e398-eb48-4a16-821d-e0df3f688ea4
   :END:
#+begin_export html
<div class="license-container">
<a href="https://neuhalfen.name/">
    <img class="inline-icon" src="/img/wikimedia/Copyright.svg"/><span> by Jens Neuhalfen</span>
</a>
</div>

<div class="license-container">
  <a href="http://creativecommons.org/licenses/by-sa/4.0/">
    <img class="inline-icon" src="/img/cc/cc.svg"/>
    <img class="inline-icon" src="/img/cc/by.svg"/>
    <img class="inline-icon" src="/img/cc/sa.svg"/>
    <p>This work is licensed under a <i>Creative Commons Attribution-ShareAlike 4.0 International</i> license.</p>
  </a>
</div>

  <div class="license-container">
    <img class="inline-icon" src="/img/github/GitHub-Mark-120px-plus.png"> <a href="https://github.com/neuhalje/presentation_git-from-the-inside">github.com/neuhalje/presentation_git-from-the-inside</a>
  <div class="license-container">
</a>
#+end_export

- [[file:licenses.txt][licenses collected from node_modules]]
